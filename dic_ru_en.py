"""
–§–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
"""
import psycopg2
from dic_fun import *


print('Starting bot of telegram')
load_dotenv()
user_db = os.getenv("USER")
password_db = os.getenv("PASSWORD")
port_db = os.getenv("PORT")
base_db = os.getenv("BASENAME")
host_db = os.getenv("HOST")
token_bot = os.getenv("TOKEN_BOT")

conn = psycopg2.connect(
    database=base_db,
    user=user_db,
    password=password_db,
    host=host_db,
    port=port_db
)
cur = conn.cursor()
# ------------------------------------------
# drop_tables(cur, conn)
create_tables(cur, conn)
# ------------------------------------------
state_storage = StateMemoryStorage()

bot = TeleBot(token_bot, state_storage=state_storage)

read_from_json('words.json', cur, conn)

known_users = []
userStep = {}
buttons = []

"""
–§—É–Ω–∫—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
"""


def show_hint(*lines):
    return '\n'.join(lines)


"""
–§—É–Ω–∫—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–∞—Ä—ã —Å–ª–æ–≤: —Ü–µ–ª–µ–≤–æ–≥–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
"""


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


@bot.message_handler(commands=['cards', 'start', 'go'])
def create_cards(message):
    cid = message.chat.id
    id_member = message.from_user.id
    if cid not in known_users:
        tuc_tuc_member(cur, conn, id_member)

        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name},"
                              f" –¥–∞–≤–∞–π —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ...\n"
                              f" –Ø –∑–Ω–∞—é 8000 —Å–ª–æ–≤ \n –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å"
                              f" —Å–≤–æ–∏ —Å–ª–æ–≤–∞ ... –Ω–∞–¥–æ –ª–∏—à—å\n"
                              f"–≤–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ///"
                              f" English word - —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ\n "
                              f"–ó–∞–ø–æ–º–Ω–∏–ª ?! –ü–æ–µ—Ö–∞–ª–∏ !!!....")
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []

    tw = get_target_word_from_base(cid, cur, conn)
    target_word = tw[0][1].upper()  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    translate = tw[0][2].upper()  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    level = tw[0][3]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    id_word = tw[0][0]

    """ —Ç–∞—â–∏–º –∏–∑ –±–∞–∑—ã –∫–∞–∫–æ–µ—Ç–æ –∫–æ–ª-–≤–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤- –æ–±–º–∞–Ω–æ–∫. –ø—Ä–æ–≤–µ—Ä—è–µ–º   
        —á—Ç–æ–±—ã –≤ –æ–±–º–∞–Ω–µ –Ω–µ –±—ã–ª–æ –Ω–∞—à–µ–≥–æ –Ω—É–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –æ—Ç–±–∏—Ä–∞–µ–º —Ç—Ä–∏ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
    """
    set_words_many = set(random.sample(ghost_english_words(cur, conn), 4))
    set_words_one = set(translate)
    res_list = list(set_words_many.difference(set_words_one))[:3]

    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)

    others = [res_list[0][0].upper(), res_list[1][0].upper(),
              res_list[2][0].upper()]  # –∏–∑ –±–∞–∑—ã –±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–≥–ª —Å–ª–æ–≤–∞
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others
        data['id_word'] = id_word
        data['level_word'] = level


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        delete_word_db(cur, conn, message.from_user.id, data['id_word'])  # —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ
        add_some_word_to_dict(cur, conn, message.from_user.id)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤–∑–∞–º–µ–Ω
    bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ {data['translate_word'].upper()} —É–¥–∞–ª–µ–Ω–æ', )
    create_cards(message)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text

    if text.find('///') != -1:
        new_words = text
        nw_list = re.split('[-]', new_words.replace('/', ''))
        print(nw_list)
        if len(nw_list) == 2:
            append_words_bd(cur, conn, message.from_user.id,
                            nw_list[0].strip(), nw_list[1].strip())
            bot.send_message(message.chat.id, f'–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å :'
                                              f'{nw_list[0]} - {nw_list[1]}')
        else:
            bot.send_message(message.chat.id,
                             '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–ª–æ–≤–∞—Ä—è ! '
                             '–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: // English word - –†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ ')
        return

    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        try:
            target_word = data['target_word']
        except KeyError:  # Exception:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. '
                                              '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ë–æ—Ç–∞ –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π: /go')
            return

        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            if data['level_word'] == 4:
                add_some_word_to_dict(cur, conn, message.from_user.id)
            level_word_up_down(cur, conn, message.from_user.id,
                               data['id_word'], data['level_word'], 1)

            # next_btn = types.KeyboardButton(Command.NEXT)
            # add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            # delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            # buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å"
                             f" —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
            level_word_up_down(cur, conn, message.from_user.id,
                               data['id_word'], data['level_word'], -1)

    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)
    if text == target_word:
        next_cards(message)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)

cur.close()
conn.close()
